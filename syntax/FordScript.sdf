%% Grammar for the FordScript language
%% By default, based on an example "entities" syntax
module FordScript

imports js/Jsfax

exports

  context-free start-symbols
    JSModule

  lexical syntax
    %% ensure color-coding
    "undefined" -> KEYWORD
  
  context-free syntax
    %% ensure color-coding
    "undefined" -> JSExp {cons("FSUndefined")}
    
    %% lambda expressions
    "function" "(" {FSIdentifier ","}* ")" JSExp            -> JSExp {cons("FSLambdaExp")}
    "function" "(" {FSIdentifier ","}* ")" ":" FSType JSExp -> JSExp {cons("FSTypedLambdaExp")}

    %% type annotations
    "void"          -> FSType {cons("FSVoid")}
    "void"          -> JSID {reject}
    JSID            -> FSType {cons("FSType")}
    
    JSID            -> FSIdentifier {cons("FSIdentifier")}
    JSID ":" FSType -> FSIdentifier {cons("FSTypedIdentifier")}
    
    "var" {FSVarDecl ","}* ";"                                             -> FSVarStat {cons("FSBlock"), prefer}
    FSIdentifier                                                           -> FSVarDecl {cons("JSVarDeclNoInit"), prefer}
    FSIdentifier "=" JSExp                                                 -> FSVarDecl {cons("JSVarDecl"), prefer}
    FSVarStat -> JSStat
    
    "function" JSID "(" {FSIdentifier ","}* ")" "{" JSStat* "}"            -> FSFuncStat {cons("JSFunctionDecl"), prefer}
    "function" JSID "(" {FSIdentifier ","}* ")" ":" FSType "{" JSStat* "}" -> FSFuncStat {cons("FSTypedFunctionDecl"), prefer}
    FSFuncStat -> JSExp
    
    "function" "(" {FSIdentifier ","}* ")" "{" JSStat* "}"                 -> JSExp {cons("JSFunctionExp"), prefer}
    "function" "(" {FSIdentifier ","}* ")" ":" FSType "{" JSStat* "}"      -> JSExp {cons("FSTypedFunctionExp"), prefer}
    
    %% classes
    "class" JSID "{" FSClassBodyDecl* "}"                  -> JSStat {cons("FSClassDecl")}
    "class" JSID "extends" FSType "{" FSClassBodyDecl* "}" -> JSStat {cons("FSExtendedClassDecl")}
    FSVarStat  -> FSClassBodyDecl
    FSFuncStat -> FSClassBodyDecl
    "super" "." JSID "(" {JSExp ","}* ")"  -> JSExp {cons("FSSuperCall")}
    "static" FSVarStat -> FSClassBodyDecl {cons("FSStaticDecl")}
    "static" FSFuncStat -> FSClassBodyDecl {cons("FSStaticDecl")}
    
    %% type augmentation
    "augment" JSID "{" FSClassBodyDecl* "}" -> JSStat {cons("FSClassAugmentation")}
    
    %% prototypes
    "prototype" JSID "{" FSClassBodyDecl* "}"                  -> JSStat {cons("FSPrototypeDecl")}
    "prototype" JSID "extends" FSType "{" FSClassBodyDecl* "}" -> JSStat {cons("FSExtendedPrototypeDecl")}

  context-free priorities
    JSExp "in" JSExp            -> JSExp
  > {
      "function" "(" {FSIdentifier ","}* ")" JSExp            -> JSExp
      "function" "(" {FSIdentifier ","}* ")" ":" FSType JSExp -> JSExp
    }
