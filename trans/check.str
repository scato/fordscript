module check

imports
  libstratego-lib
  include/FordScript
  lib/editor-common.generated
  check/record

rules

  // Analysis: does a topdown traversal of the tree,
  // and tries to apply the record-class and record-type rules.
  analyze:
    t -> t
    with
      <topdown(try(record-class))> t
      ; <topdown(try(record-type))> t

  constraint-error:
    FSTypedLambdaExp(x*, FSType(t), e) -> (t, $[Type [t] is not defined])
    where
      not(<GetClass> t) // no entity for this type
  
  constraint-error:
    FSTypedIdentifier(i, FSType(t)) -> (t, $[Type [t] is not defined])
    where
      not(<GetClass> t) // no entity for this type
  
  constraint-error:
    FSTypedFunctionDecl(i, x*, FSType(t), s*) -> (t, $[Type [t] is not defined])
    where
      not(<GetClass> t) // no entity for this type
  
  constraint-error:
    FSTypedFunctionExp(x*, FSType(t), s*) -> (t, $[Type [t] is not defined])
    where
      not(<GetClass> t) // no entity for this type
  
  // Reports an error if an entity is defined more than once.
  // This constraint is implemented by testing if the "bag" of
  // all entities x is not a singleton list.
  constraint-error:
    FSClassDecl(i, _) -> (i, $[Duplicate class name])
    where
      not(<bagof-GetClass> i => [_])
  
  // constraint-note:
  //   Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
  //                                     (this note is defined in trans/check.str) ])

  constraint-warning:
    i -> (i, $[])
    where
      not(id)

  constraint-note:
    i -> (i, $[])
    where
      not(id)
