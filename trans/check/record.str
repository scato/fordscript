module check/record

imports
  libstratego-lib
  include/FordScript
  lib/editor-common.generated

rules
  record-class:
    FSClassDecl(i, d*) -> FSClassDecl(i, d*)
    with
      <map(try(record-member(|i)))> d*;
      rules(
        GetClass :+ i -> i
      )
  
  record-class:
    FSExtendedClassDecl(i, FSType(s), d*) -> FSExtendedClassDecl(i, s, d*)
    with
      <map(try(record-member(|i)))> d*;
      rules(
        GetClass :+ i -> i
        GetSuperClass :+ i -> s
      )
  
  record-class:
    FSClassAugmentation(i, d*) -> FSClassAugmentation(i, d*)
    with
      <map(try(record-member(|i)))> d*;
      rules(
        GetClass :+ i -> i
      )
  
  record-class:
    FSStaticClassDecl(i, e, a, d*) -> FSStaticClassDecl(i, e, a, d*)
    with
      <map(try(record-member(|i)))> d*;
      rules(
        GetClass :+ i -> i
      )
  
  record-member(|i):
    FSBlock(s*) -> FSBlock(s*)
    with
      <map(record-member(|i))> s*
  
  record-member(|i):
    JSVarDecl(m, v) -> JSVarDecl(m, v)
    with
      <record-member(|i)> m
  
  record-member(|i):
    JSVarDeclNoInit(ms) -> JSVarDeclNoInit(ms)
    with
      <record-member(|i)> ms
  
  record-member(|i):
    FSIdentifier(m) -> FSIdentifier(m)
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> "Object"
      )
  
  record-member(|i):
    FSTypedIdentifier(m, FSType(t)) -> FSTypedIdentifier(m, FSType(t))
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> t
      )
  
  record-member(|i):
    JSVarDecl(FSTypedIdentifier(m, FSType(t)), v) -> JSVarDecl(FSTypedIdentifier(m, FSType(t)), v)
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> t
      )
  
  record-member(|i):
    JSVarDeclNoInit(FSTypedIdentifier(m, FSType(t))) -> JSVarDeclNoInit(FSTypedIdentifier(m, FSType(t)))
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> t
      )
  
  record-member(|i):
    JSFunctionDecl(m, x*, s*) -> JSFunctionDecl(m, x*, s*)
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> "Function"
        GetMemberReturnType :+ (i, m) -> "Object"
      )
  
  record-member(|i):
    FSTypedFunctionDecl(m, x*, FSType(t), s*) -> FSTypedFunctionDecl(m, x*, FSType(t), s*)
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> "Function"
        GetMemberReturnType :+ (i, m) -> t
      )
  
  record-member(|i):
    FSTypedFunctionDecl(m, x*, FSVoid(), s*) -> FSTypedFunctionDecl(m, x*, FSVoid(), s*)
    with
      rules(
        GetMember :+ (i, m) -> (i, m)
        GetMemberType :+ (i, m) -> "Function"
        GetMemberReturnType :+ (i, m) -> "void"
      )
  
  record-member(|i):
    FSStaticDecl(JSFunctionDecl(m, x*, s*)) -> FSStaticDecl(JSFunctionDecl(m, x*, s*))
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> "Function"
        GetStaticMemberReturn :+ (i, m) -> "Object"
      )
  
  record-member(|i):
    FSStaticDecl(FSTypedFunctionDecl(m, x*, FSType(t), s*)) -> FSStaticDecl(FSTypedFunctionDecl(m, x*, FSType(t), s*))
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> "Function"
        GetStaticMemberReturn :+ (i, m) -> t
      )
  
  record-member(|i):
    FSStaticDecl(FSTypedFunctionDecl(m, x*, FSVoid(), s*)) -> FSStaticDecl(FSTypedFunctionDecl(m, x*, FSVoid(), s*))
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> "Function"
        GetStaticMemberReturn :+ (i, m) -> "void"
      )
  /*
  record-member(|i):
    FSStaticDecl(FSBlock(s*)) -> FSStaticDecl(FSBlock(s*))
    with
      <map(record-static-member(|i))> s*
  
  record-member(|i):
    FSPublicDecl(d) -> FSPublicDecl(d)
    with
      <record-member(|i)> d;
      <record-access(|i,"public")> d
  
  record-member(|i):
    FSProtectedDecl(d) -> FSProtectedDecl(d)
    with
      <record-member(|i)> d;
      <record-access(|i,"protected")> d
  
  record-member(|i):
    FSPrivateDecl(d) -> FSPrivateDecl(d)
    with
      <record-member(|i)> d;
      <record-access(|i,"private")> d
  
  record-access(|i,a):
    JSVarDeclNoInit(FSIdentifier(m)) -> JSVarDeclNoInit(FSIdentifier(m))
    with
      rules(
        GetMemberAccess :+ (i, m) -> a
      )
  
  record-access(|i,a):
    JSFunctionDecl(m, x*, s*) -> JSFunctionDecl(m, x*, s*)
    with
      rules(
        GetMemberAccess :+ (i, m) -> a
      )
  */
  
  record-static-member(|i):
    FSBlock(s*) -> FSBlock(s*)
    with
      <map(record-static-member(|i))> s*
  
  record-static-member(|i):
    JSVarDecl(m, v) -> JSVarDecl(m, v)
    with
      <record-static-member(|i)> m
  
  record-static-member(|i):
    JSVarDeclNoInit(ms) -> JSVarDeclNoInit(ms)
    with
      <record-static-member(|i)> ms
  
  record-static-member(|i):
    FSIdentifier(m) -> FSIdentifier(m)
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> "Object"
      )
  
  record-static-member(|i):
    FSTypedIdentifier(m, FSType(t)) -> FSTypedIdentifier(m, FSType(t))
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> t
      )
  
  record-static-member(|i):
    JSVarDecl(FSTypedIdentifier(m, FSType(t)), v) -> JSVarDecl(FSTypedIdentifier(m, FSType(t)), v)
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> t
      )
  
  record-static-member(|i):
    JSVarDeclNoInit(FSTypedIdentifier(m, FSType(t))) -> JSVarDeclNoInit(FSTypedIdentifier(m, FSType(t)))
    with
      rules(
        GetStaticMember :+ (i, m) -> (i, m)
        GetStaticMemberType :+ (i, m) -> t
      )
  
  record-type:
    FSTypedIdentifier(v, FSType(t)) -> FSTypedIdentifier(v, FSType(t))
    with
      rules(
        GetType :+ v -> t
      )
